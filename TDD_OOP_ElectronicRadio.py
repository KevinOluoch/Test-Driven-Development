#This file was originally generated by PyScripter's unitest wizard

import unittest
import OOP_ElectronicRadio

class TestElectronic(unittest.TestCase):

    def test_Electronic_setUp(self):
        with self.assertRaises(TypeError): OOP_ElectronicRadio.Electronic()


    def tearDown(self):
        pass

    def testpower_connection(self):
        pass

    def testswitch_on(self):
        pass

    def testswitch_off(self):
        pass

class TestRadio(unittest.TestCase):


    def setUp(self):
        LG = OOP_ElectronicRadio.Radio()



    def tearDown(self):
        pass

    def testswitch_on(self):
        LG = OOP_ElectronicRadio.Radio()
        self.assertEqual(LG.switch_on(),"Please connect power first via .power_connection ('connect')")

    def testset_voloume(self):
        LG = OOP_ElectronicRadio.Radio()
        self.assertEqual(LG.set_voloume(1),'This Radio is off', msg="Should return:'This Radio is off'")

    def testset_channel(self):
        LG = OOP_ElectronicRadio.Radio()
        self.assertEqual(LG.set_channel(1),'This Radio is off', msg= "Should return:'This Radio is off'")

    def testpower_connection(self):
        LG = OOP_ElectronicRadio.Radio()
        with self.assertRaises(ValueError): LG.power_connection(1)

    def testswitch_off(self):
        LG = OOP_ElectronicRadio.Radio()
        self.assertEqual( LG.switch_off(),'The Radio is OFF and power is disconnected ', msg= "Should return:'The Radio is OFF and power is disconnected '")

    def teststatus(self):
        LG = OOP_ElectronicRadio.Radio()
        self.assertEqual(LG.status(),' status: OFF', msg="Since car is off, you should return:' status: OFF'")

    def testvolume(self):
        LG = OOP_ElectronicRadio.Radio()
        self.assertEqual(LG.volume, 0, msg="When you initialize volume sholud be 0")

    def testchannel(self):
        LG = OOP_ElectronicRadio.Radio()
        self.assertEqual(LG.channel, 0, msg="When you initialize channel sholud be 0")

    def teststate(self):
        LG = OOP_ElectronicRadio.Radio()
        self.assertEqual(LG.state, "OFF", msg="When you initialize state sholud be OFF")

    def testpower(self):
        LG = OOP_ElectronicRadio.Radio()
        self.assertEqual(LG.power, "disconnect", msg="When you initialize power sholud be 'disconnected'")
#--------------------------------------------------------------------------------------

    def testpower_connection2(self):
        LG = OOP_ElectronicRadio.Radio()
        self.assertEqual (LG.power_connection("disconnect"), None, msg="power_connection should return None")
        self.assertEqual (LG.power_connection("connect"), None, msg="power_connection should return None")

    def testswitch_on2(self):
        LG = OOP_ElectronicRadio.Radio()
        LG.power_connection("connect")
        self.assertEqual(LG.switch_on()," status: ON channel: 87.5 volume: 0")

    def testset_voloume2(self):
        LG = OOP_ElectronicRadio.Radio()
        LG.power_connection("connect")
        LG.switch_on()
        self.assertEqual(LG.set_voloume(1),"Volume: 1.0")
        self.assertEqual(LG.set_voloume(-1),"Sorry, You can only set a volume value that is between 0.0 and 100.0")
        self.assertEqual(LG.set_voloume(101),"Sorry, You can only set a volume value that is between 0.0 and 100.0")

    def testset_channel2(self):
        LG = OOP_ElectronicRadio.Radio()
        LG.power_connection("connect")
        LG.switch_on()
        self.assertEqual(LG.set_channel(1),"The channel must be between 87.5 and 108.0", msg="When you switch off it should return: 'The channel must be between 87.5 and 108.0'")

    def testswitch_off2(self):
        LG = OOP_ElectronicRadio.Radio()
        LG.power_connection("connect")
        self.assertEqual( LG.switch_off(),'The Radio is OFF but power is connected ')
        LG.switch_on()
        self.assertEqual( LG.switch_off(),' status: OFF ', msg="When you switch off it should return: ' status: OFF ' ")

    def teststatus2(self):
        LG = OOP_ElectronicRadio.Radio()
        LG.power_connection("connect")
        LG.switch_on()
        self.assertEqual(LG.status()," status: ON channel: 87.5 volume: 0", msg="When you check status it should return: ' status: ON channel: 87.5 volume: 0'")

    def teststate2(self):
        LG = OOP_ElectronicRadio.Radio()
        LG.power_connection("connect")
        LG.switch_on()
        self.assertEqual(LG.state, "ON", msg="State sholud return 'ON'")

    def testpower2(self):
        LG = OOP_ElectronicRadio.Radio()
        LG.power_connection("connect")
        self.assertEqual(LG.power, "connect", msg="power sholud return 'connect'")



if __name__ == '__main__':
    unittest.main()





